name: deploy the backend

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/noteforge
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest

      - name: Deploy to AWS VM via SSH
        shell: bash
        run: |
          set -euo pipefail
          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key
          chmod 600 ssh_key

          # Run remote commands on EC2
          ssh -o StrictHostKeyChecking=no -i ssh_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -euo pipefail

            echo "Disk usage before cleanup:" && df -h || true
            echo "Docker disk usage before cleanup:" && docker system df || true

            # Log in to Docker Hub
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Stop and remove old container if exists
            docker ps -q --filter "name=noteforge" | grep -q . && docker stop noteforge && docker rm noteforge || true

            # Cleanup unused containers/images/build cache to free space
            docker container prune -f || true
            docker image prune -af || true
            docker builder prune -af || true

            echo "Pulling image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/noteforge:${{ github.sha }}

            echo "Starting container..."
            docker run -d \
              --name noteforge \
              --restart unless-stopped \
              -p 80:3000 \
              --env-file ${{ secrets.EC2_ENV_FILE_PATH }} \
              -e PORT=3000 \
              -e HOSTNAME=0.0.0.0 \
              ${{ secrets.DOCKERHUB_USERNAME }}/noteforge:${{ github.sha }}

            echo "Disk usage after deploy:" && df -h || true
            echo "Docker disk usage after deploy:" && docker system df || true
          EOF
